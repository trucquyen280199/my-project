[{"D:\\my-project\\duAn3-quan_ly_cong_viec\\src\\index.js":"1","D:\\my-project\\duAn3-quan_ly_cong_viec\\src\\App.js":"2","D:\\my-project\\duAn3-quan_ly_cong_viec\\src\\reportWebVitals.js":"3","D:\\my-project\\duAn3-quan_ly_cong_viec\\src\\component\\taskForm.js":"4","D:\\my-project\\duAn3-quan_ly_cong_viec\\src\\component\\Control.js":"5","D:\\my-project\\duAn3-quan_ly_cong_viec\\src\\component\\TaskList.js":"6","D:\\my-project\\duAn3-quan_ly_cong_viec\\src\\component\\Search.js":"7","D:\\my-project\\duAn3-quan_ly_cong_viec\\src\\component\\Sort.js":"8","D:\\my-project\\duAn3-quan_ly_cong_viec\\src\\component\\taskItem.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":7542,"mtime":1620446556336,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":4008,"mtime":1620353557541,"results":"14","hashOfConfig":"11"},{"size":490,"mtime":1620380312502,"results":"15","hashOfConfig":"11"},{"size":3086,"mtime":1620357285578,"results":"16","hashOfConfig":"11"},{"size":1422,"mtime":1620376865809,"results":"17","hashOfConfig":"11"},{"size":1953,"mtime":1620448736628,"results":"18","hashOfConfig":"11"},{"size":1415,"mtime":1620356566977,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"3ix2fc",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"D:\\my-project\\duAn3-quan_ly_cong_viec\\src\\index.js",[],["44","45"],"D:\\my-project\\duAn3-quan_ly_cong_viec\\src\\App.js",["46"],"import React, { Component, useState } from 'react';\r\nimport './App.css';\r\nimport TaskForm from './component/taskForm';\r\nimport TaskControl from './component/Control';\r\nimport TaskList from './component/TaskList';\r\n\r\nclass App extends Component {\r\n \r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            tasks: [],\r\n            isDisplayForm : false,\r\n            itemEditing : null,\r\n            filter: {\r\n                name: '',\r\n                status:  -1\r\n            },\r\n            keyword : '',\r\n            sortBy: 'name',\r\n            sortValue: 1,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(localStorage && localStorage.getItem('tasks')){\r\n            var tasks = JSON.parse(localStorage.getItem('tasks'));\r\n            this.setState({\r\n                tasks : tasks\r\n            });\r\n        }\r\n    }\r\n\r\n    hideAddItem(){\r\n        this.setState({\r\n            isDisplayForm: false\r\n        });\r\n    }\r\n\r\n    showAddItem = () =>{\r\n        this.setState({\r\n            isDisplayForm: true\r\n        });\r\n    }\r\n\r\n    s4() {\r\n        return  Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n    }\r\n\r\n    findIndex = (id) =>{\r\n        var { tasks } = this.state;\r\n        var result = -1;\r\n        tasks.forEach((task, index) => {\r\n            if(task.id === id){\r\n                result = index;\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    createID() {\r\n        return this.s4() + this.s4();\r\n    }\r\n\r\n    onSubmit = (data) => {\r\n        var tasks = this.state.tasks;\r\n        data.id = this.createID();\r\n        tasks.push(data);\r\n        this.setState({tasks: tasks})\r\n        localStorage.setItem('tasks', JSON.stringify(tasks));\r\n    }\r\n\r\n    onUpdateStatus = (id) => { \r\n        var tasks = this.state.tasks;\r\n        var index = this.findIndex(id);\r\n        tasks[index].status = !tasks[index].status;\r\n        this.setState({\r\n            tasks : tasks\r\n        })\r\n        localStorage.setItem('tasks', JSON.stringify(tasks));\r\n    }\r\n    \r\n    onDeleteTask = (id) => {\r\n        var tasks = this.state.tasks;\r\n        var index = this.findIndex(id);\r\n        tasks.splice(index, 1);\r\n        this.setState({tasks: tasks})\r\n        localStorage.setItem('tasks', JSON.stringify(tasks));\r\n        this.onExitForm();\r\n    }\r\n\r\n    onSearch = (keyword) => {\r\n        this.setState({\r\n            keyword : keyword\r\n        });\r\n    }\r\n\r\n    onFilter = (filterName, filterStatus) => {\r\n        filterStatus = parseInt(filterStatus, 10);\r\n        this.setState({\r\n            filter: {\r\n                name: filterName.toLowerCase(),\r\n                status: filterStatus\r\n            }\r\n        });\r\n    }\r\n\r\n    onSelectedItem = (item) => {\r\n        this.setState({\r\n            itemEditing : item,\r\n            isDisplayForm : true\r\n        })\r\n    }\r\n\r\n    onSort = (sortBy, sortValue) => {\r\n        this.setState({\r\n            sortBy: sortBy,\r\n            sortValue: sortValue\r\n        })\r\n    }\r\n\r\n    onToggleForm = () => {\r\n        if(this.state.itemEditing !== null){\r\n            this.setState({\r\n                itemEditing : null\r\n            });\r\n        }else{\r\n            this.setState({\r\n                isDisplayForm : !this.state.isDisplayForm\r\n            });\r\n        }\r\n    }\r\n\r\n    onExitForm = () =>{\r\n        this.setState({\r\n            isDisplayForm : false,\r\n            itemEditing : null\r\n        });\r\n    }\r\n    \r\n    onSave = (data) => {\r\n        var tasks = this.state.tasks;\r\n        data.status = data.status === 'true' ? true : false;\r\n        if(data.id === ''){\r\n            data.id = this.createID();\r\n            tasks.push(data);\r\n        }else{\r\n            var index = this.findIndex(data.id);\r\n            tasks[index] = data;\r\n        }\r\n        this.setState({tasks: tasks})\r\n        localStorage.setItem('tasks', JSON.stringify(tasks));\r\n    }\r\n\r\n    render(){\r\n        var {\r\n            tasks,\r\n            isDisplayForm,\r\n            keyword, \r\n            filter,\r\n            itemEditing,\r\n            sortBy,\r\n            sortValue,\r\n\r\n        } = this.state;\r\n\r\n        if(filter){\r\n            if(filter.name){\r\n                tasks = tasks.filter((task)=>{\r\n                    return task.name.toLowerCase().indexOf(filter.name) !== -1;\r\n                });\r\n            }\r\n            // if(filter.status){\r\n                tasks = tasks.filter((task)=>{\r\n                    if(filter.status === -1){\r\n                        return task;\r\n                    } else{\r\n                        return task.status === (filter.status === 1 ? true : false)\r\n                    }\r\n                });\r\n            // }\r\n        }\r\n\r\n        if(keyword){\r\n            tasks = tasks.filter((task)=>{\r\n                return task.name.toLowerCase().indexOf(keyword) !== -1;\r\n            })\r\n        }\r\n\r\n        if(sortBy === 'name'){\r\n            tasks.sort((a, b)=>{\r\n                if(a.name > b.name){\r\n                    return sortValue;\r\n                } else if(a.name < b.name){\r\n                    return -sortValue;\r\n                } else{\r\n                    return 0;\r\n                }\r\n            })\r\n        } else {\r\n            tasks.sort((a, b)=>{\r\n                if(a.status > b.status){\r\n                    return -sortValue;\r\n                } else if(a.status < b.status){\r\n                    return sortValue;\r\n                } else{\r\n                    return 0;\r\n                }\r\n            })\r\n        }\r\n\r\n        var elmForm = isDisplayForm === true ? <TaskForm\r\n                                                    onSave={ this.onSave }\r\n                                                    onExitForm={ this.onExitForm }\r\n                                                    itemEditing={ itemEditing }\r\n                                                    /> : '';\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"container\"> \r\n                    <div className=\"text-center\"> \r\n                        <h1>Quản Lý Công Việc</h1> \r\n                    </div> \r\n                    <div className=\"row border py-3\"> \r\n                        <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\"> \r\n                            { elmForm } \r\n                        </div> \r\n                        <div className={ this.state.isDisplayForm ? \"col-8 text-left\": \"col-12 text-left\" }> \r\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={ this.onToggleForm } > \r\n                                + Thêm Công Việc \r\n                            </button> \r\n                            <TaskControl\r\n                                onSearch={ this.onSearch }\r\n                                onSort={ this.onSort }\r\n                                sortBy={ sortBy }\r\n                                sortValue={ sortValue }\r\n                            />\r\n                            <TaskList tasks={ tasks }\r\n                                onUpdateStatus={ this.onUpdateStatus }\r\n                                onDeleteTask={ this.onDeleteTask }\r\n                                // filterName={ filterName }\r\n                                // filterStatus={ filterStatus }\r\n                                onFilter={ this.onFilter }\r\n                                onSelectedItem={ this.onSelectedItem } /> \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\nexport default App;","D:\\my-project\\duAn3-quan_ly_cong_viec\\src\\reportWebVitals.js",[],"D:\\my-project\\duAn3-quan_ly_cong_viec\\src\\component\\taskForm.js",["47"],"import React, { Component, useState } from 'react';\r\n\r\nclass TaskForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id : '',\r\n            name : '',\r\n            status : false\r\n        }\r\n    }\r\n    // let [states, setState] = useState({\r\n    //     id : '',\r\n    //     name : '',\r\n    //     status : false\r\n    // })\r\n\r\n    componentDidMount() {\r\n        if(this.props.itemEditing && this.props.itemEditing.id !== null){\r\n            this.setState({\r\n                id : this.props.itemEditing.id,\r\n                name : this.props.itemEditing.name,\r\n                status : this.props.itemEditing.status\r\n            });\r\n        }else{\r\n            this.onClear();\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if(nextProps && nextProps.itemEditing){\r\n            this.setState({\r\n                id : nextProps.itemEditing.id,\r\n                name : nextProps.itemEditing.name,\r\n                status : nextProps.itemEditing.status\r\n            });\r\n        }else{\r\n            this.onClear();\r\n        }\r\n    }\r\n\r\n    onHandleChange = (event) => {\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.type === 'checkbox' ? target.checked : target.value;\r\n        this.setState({\r\n            [name] : value\r\n        });\r\n    }\r\n\r\n    onHandleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.onSave(this.state);\r\n        this.onClear();\r\n        this.onExitForm();\r\n        console.log()\r\n    }\r\n\r\n    onClear = () => {\r\n        this.setState({\r\n            id : '',\r\n            name : '',\r\n            status : false\r\n        });\r\n    }\r\n\r\n    onExitForm = () => {\r\n        this.props.onExitForm();\r\n    }\r\n    render(){\r\n\r\n    \r\n        return (\r\n            <div className=\"panel panel-warning border rounded\" style={{overflow: \"hidden\"}}>\r\n                <div className=\"panel-heading d-flex justify-content-between text-white bg-dark border-bottom p-2 \">\r\n                    <h4 className=\"panel-title\">Thêm Công Việc</h4>\r\n                    <span\r\n                        className=\"fa fa-times-circle text-right\"\r\n                        onClick={this.onExitForm}\r\n                    >X</span>\r\n                </div>\r\n                <div className=\"panel-body p-2\">\r\n                    <form onSubmit={this.onHandleSubmit} >\r\n                        <div className=\"form-group text-left\">\r\n                            <label>Tên :</label>\r\n                            <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    name=\"name\"\r\n                                    value={this.state.name}\r\n                                    onChange={ this.onHandleChange }\r\n                                />\r\n                        </div>\r\n                        <div className=\"text-left\" >\r\n                            <label>Trạng Thái :</label>\r\n                            <select className=\"form-control\" \r\n                                    name=\"status\" \r\n                                    value={ this.state.status } \r\n                                    onChange={ this.onHandleChange } \r\n                                > \r\n                                <option value={true}>Kích Hoạt</option> \r\n                                <option value={false}>Ẩn</option> \r\n                            </select>\r\n                        </div>\r\n                        <br/>\r\n                        <div className=\"text-center\">\r\n                            <button type=\"submit\" className=\"btn btn-warning\" >Thêm</button>&nbsp;\r\n                            <button type=\"button\" className=\"btn btn-danger\" onClick={ this.onClear } >Hủy Bỏ</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default TaskForm;","D:\\my-project\\duAn3-quan_ly_cong_viec\\src\\component\\Control.js",["48"],"import React, { Component, useState } from 'react';\r\nimport Search from './Search';\r\nimport Sort from './Sort';\r\n\r\n\r\nclass Control extends Component {\r\n    render(){\r\n        return (\r\n            <div className=\"row col-12 my-2 px-0\">\r\n                <Search onSearch={ this.props.onSearch} />\r\n                <Sort onSort ={ this.props.onSort } sortBy = { this.props.sortBy } sortValue = { this.props.sortValue } />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Control;\r\n","D:\\my-project\\duAn3-quan_ly_cong_viec\\src\\component\\TaskList.js",[],"D:\\my-project\\duAn3-quan_ly_cong_viec\\src\\component\\Search.js",[],"D:\\my-project\\duAn3-quan_ly_cong_viec\\src\\component\\Sort.js",["49","50","51","52"],"import React, { Component } from 'react';\r\n\r\nclass Sort extends Component {\r\n    \r\n    onClick = (sortBy, sortValue)=>{\r\n       \r\n        this.props.onSort(sortBy,sortValue );\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <div className=\"dropdown\">\r\n                    <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\r\n                        Sắp Xếp \r\n                    </button>\r\n                    <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                        <li className=\"pl-2\" onClick={ () => this.onClick('name', 1) }>\r\n                            <a role=\"button\" className={ (this.props.sortBy === \"name\" & this.props.sortValue === 1) ? \"sort-selected\" : \"\" }>\r\n                                Tên A-Z\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"pl-2\" onClick={ () => this.onClick('name', -1) }>\r\n                            <a role=\"button\" className={ (this.props.sortBy === \"name\" & this.props.sortValue === -1) ? \"sort-selected\" : \"\" }>Tên Z-A </a>\r\n                        </li>\r\n                        {/* <li  role=\"separator\" className=\"divider pl-2\"></li> */}\r\n                        <li className=\"pl-2\"><a role=\"button\" onClick={ () => this.onClick('status', 1) } className={ (this.props.sortBy === \"status\" & this.props.sortValue === 1) ? \"sort-selected\" : \"\" }>Trạng Thái Kích Hoạt</a></li>\r\n                        <li className=\"pl-2\"><a role=\"button\" onClick={ () => this.onClick('status', -1) } className={ (this.props.sortBy === \"status\" & this.props.sortValue === -1) ? \"sort-selected\" : \"\" }>Trạng Thái Ẩn</a></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )    \r\n    }\r\n}\r\nexport default Sort;","D:\\my-project\\duAn3-quan_ly_cong_viec\\src\\component\\taskItem.js",[],["53","54"],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":1,"column":28,"nodeType":"61","messageId":"62","endLine":1,"endColumn":36},{"ruleId":"59","severity":1,"message":"60","line":1,"column":28,"nodeType":"61","messageId":"62","endLine":1,"endColumn":36},{"ruleId":"59","severity":1,"message":"60","line":1,"column":28,"nodeType":"61","messageId":"62","endLine":1,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":19,"column":29,"nodeType":"65","endLine":19,"endColumn":143},{"ruleId":"63","severity":1,"message":"64","line":24,"column":29,"nodeType":"65","endLine":24,"endColumn":144},{"ruleId":"63","severity":1,"message":"64","line":27,"column":46,"nodeType":"65","endLine":27,"endColumn":206},{"ruleId":"63","severity":1,"message":"64","line":28,"column":46,"nodeType":"65","endLine":28,"endColumn":208},{"ruleId":"55","replacedBy":"66"},{"ruleId":"57","replacedBy":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["68"],["69"],"no-global-assign","no-unsafe-negation"]